    <h2 class="text-lg font-bold">Confidence Field(s)</h2>
    <div class="flex gap-6 flex-wrap pb-4">
      <div class="grow">
        
        <p class="text-base my-1">What field(s) provide the confidence?</p>
        <auto-complete 
          data:from="this.config.sortedFieldNames" 
          selected:bind="this.config.confidenceFields"
          inputPlaceholder:raw="Search for field"></auto-complete>
      </div>
      <div class="lg:w-112 bg-neutral-30 p-1 w-full">
        <p class="my-1 text-sm">
          Confidence is how certain your team feels about the median estimate. 
          See the <a href="https://bitovi.github.io/statistical-software-estimator/">Statistical Software Estimator</a> for a deeper understanding 
          on how confidence and median estimate work together. 
          See <a href="https://www.bitovi.com/academy/learn-agile-program-management-with-jira/continuous-exploration-board.html#adding-custom-fields">Adding Custom Fields</a>
          for how to create a <code class="inline-code">Story points confidence</code> field.
        </p>
      </div>
    </div>

    <h2 class="text-lg font-bold">Adjusted Story Point Output Field</h2>
    <div class="flex gap-6 flex-wrap pb-4">
      <div class="grow">
        
        <p class="text-base my-1">What field should have the resulting story points?</p>
        <auto-complete 
          data:from="this.config.sortedFieldNames" 
          selected:bind="this.config.storyPointField"
          inputPlaceholder:raw="Search for field"></auto-complete>
      </div>
      <div class="lg:w-112 bg-neutral-30 p-1 w-full">
        <p class="my-1 text-sm">
          This AutoScheduler writes to the <code class="inline-code">Adjusted Story Point</code> field the adjusted story points 
          combining the median estimate and confidence. This should typically be Jira's default <code class="inline-code">Story points</code>
          field. See the <a href="https://bitovi.github.io/statistical-software-estimator/">Statistical Software Estimator</a> for a deeper understanding 
          on how confidence and median estimate work together. 
        </p>
      </div>
    </div>

    <h2 class="text-lg font-bold">Start Date Output Field</h2>
    <div class="flex gap-6 flex-wrap pb-4">
      <div class="grow">
        
        <p class="text-base my-1">What field should have the resulting story points?</p>
        <auto-complete 
          data:from="this.config.sortedFieldNames" 
          selected:bind="this.config.startDateField"
          inputPlaceholder:raw="Search for field"></auto-complete>
      </div>
      <div class="lg:w-112 bg-neutral-30 p-1 w-full">
        <p class="my-1 text-sm">
          The AutoScheduler writes epic start dates to the <code class="inline-code">Start date</code> field.
          This should typically be Jira's default <code class="inline-code">Start date</code> field.
        </p>
      </div>
    </div>

    <h2 class="text-lg font-bold">Due Date Output Field</h2>
    <div class="flex gap-6 flex-wrap pb-6">
      <div class="grow">
        
        <p class="text-base my-1">What field should have the resulting story points?</p>
        <auto-complete 
          data:from="this.config.sortedFieldNames" 
          selected:bind="this.config.dueDateField"
          inputPlaceholder:raw="Search for field"></auto-complete>
      </div>
      <div class="lg:w-112 bg-neutral-30 p-1 w-full">
        <p class="my-1 text-sm">
          The AutoScheduler writes epic end dates to the <code class="inline-code">Due date</code> field.
          This should typically be Jira's default <code class="inline-code">Due date</code> field.
        </p>
      </div>
    </div>



   
   MORE
   
   
   
   
   <!--
      <div class="flex rounded-lg border-neutral-800 border-solid border text-base p-3 gap-6">
        {{# if( this.rawIssues ) }}
            

            {{# not(this.configuringCSV) }}
            <div class="flex grow gap-1">
              <label class="text-base py-2">Zoom:</label>
              <input type="range" class="grow"
                min="3" max="20"
                value:from="this.dayWidth" on:change:value:to="this.dayWidth"/>
            </div>

            <div class="flex grow gap-1">
              <label class="text-base py-2">Likelihood ({{this.uncertaintyWeight}}%):</label>
              <input 
                class="grow"
                type="range"
                min="50" max="90"
								step="5"
                value:from="this.uncertaintyWeight" on:change:value:to="this.uncertaintyWeight"/>
                
            </div>

						<div  class="flex gap-1">
							<label class="text-base py-2">Start Date:</label>
							<input type="date"
                class="form-border font-mono px-1"
								valueAsDate:bind="this.startDate"/>
						</div>
            <div>
              {{# if(this.issueUpdates.isPending) }}
                <button disabled>Saving ...</button>
              {{ else }}
                <button class="btn-primary"
                  on:click="this.saveDates(scope.event)" disabled:from="not(this.startDate)">Update Epic Dates</button>
              {{/ if }}
            </div>
            {{/ not }}
        {{ else }}
          <div>Loading issues</div>
        {{/ if }}
      </div>-->




      INSIDE MAIN

          <!--
		<jira-teams
			class="py-2"
			teams:from="this.teams"
			dayWidth:from="this.dayWidth"
			tooltip:from="this.tooltip"
			getVelocityForTeam:from="this.getVelocityForTeam"
			updateVelocity:from="this.updateVelocity"
			startDate:from="this.startDate"
			addWorkPlanForTeam:from="this.addWorkPlanForTeam"
			removeWorkPlanForTeam:from="this.removeWorkPlanForTeam"
			></jira-teams>-->




DETAILS


<details class="border-yellow-500 border-solid border bg-white mt-4" open="true">
      <summary class="text-base p-3 bg-yellow-500 cursor-pointer">
        Advanced Configuration
      </summary>
      <div class="p-2">
        <p class="mb-4">The following configuration allows for complex rules to be provided to the AutoScheduler via 
          <a href="https://jsonlogic.com/">JsonLogic</a>.  If you need help, reach out on <a href="https://discord.gg/J7ejFsZnJ4">Bitovi's Discord</a>.
        </p>
        <h2 class="text-lg font-bold">Get Team Key</h2>
        <p>Given an issue, returns a key that represents which team will take on the work.</p>
        <jira-configure-json-logic rawIssues:from="this.rawIssues" jsonLogic:bind="this.config.getTeamKeyJsonLogic"/>
    
    
        <h2 class="text-lg font-bold">Get Days Per Sprint</h2>
        <p>Given a team, returns the number of work days in a sprint.</p>
        <jira-configure-json-logic rawIssues:from="this.rawIssues" jsonLogic:bind="this.config.getDaysPerSprintJsonLogic"/>
    
        <h2 class="text-lg font-bold">Get Confidence</h2>
        <p>Given an issue, returns the conflidence (from 0-100)</p>
        <jira-configure-json-logic rawIssues:from="this.rawIssues" jsonLogic:bind="this.config.getConfidenceJsonLogic"/>
    
        <h2 class="text-lg font-bold">Get Estimate</h2>
        <p>Given an issue, returns the amount of work in story points.</p>
        <jira-configure-json-logic rawIssues:from="this.rawIssues" jsonLogic:bind="this.config.getEstimateJsonLogic"/>
    
        <h2 class="text-lg font-bold">Get Parent Key</h2>
        <p>Given an issue, returns the container issue's key.</p>
        <jira-configure-json-logic rawIssues:from="this.rawIssues" jsonLogic:bind="this.config.getParentKeyJsonLogic"/>
    
    
        <h2 class="text-lg font-bold">Get Blocking Keys</h2>
        <p>Given an issue, returns an array of keys that the issue blocks.</p>
        <jira-configure-json-logic rawIssues:from="this.rawIssues" jsonLogic:bind="this.config.getBlockingKeysJsonLogic"/>
    
        <h2 class="text-lg font-bold">Types</h2>
        {{# if(this._showTypeInfo) }}
          <ul>
            {{# for( issueType of this.issueTypes) }}
              <li>{{issueType}} -
                    {{this.issuesByType[issueType].length}} -
    
                  <details><summary>Settings</summary>
                  {{# let keys=this.issueTypesKeysWithValues[issueType] }}
    
                    <ul>
                    {{# for(keyItem of keys)}}
                      <li><b>{{keyItem.key}}</b>:
                        <select>
                          {{# for(value of keyItem.values) }}
                            <option>{{value}}</option>
                          {{/ for}}
                        </select>
                      </li>
                    {{/ for}}
                    </ul>
                  {{/ let }}
                  </details>
              </li>
            {{/ for }}
          </ul>
        {{ else }}
          <button on:click="this.showTypeInfo()">Show Type Info</button>
        {{/ if }}
      </div>

  </details>