import{c as e,a as t,g as s,b as r}from"./main-Bk-in0Sx.js";const i=new Intl.DateTimeFormat("en-CA",{year:"numeric",month:"2-digit",day:"2-digit",calendar:"iso8601",timeZone:"UTC"});class a extends e{static view='\n        <form class="p-4 rounded">\n            <h3 class="text-lg font-semibold">Review changes</h3>\n            <div \n                class="grid gap-x-3 py-4"\n                style="grid-template-columns: repeat(9, auto); ">\n                <div style="grid-row: 1; grid-column: 1 / span 3" class="text-sm"></div>\n                <div style="grid-row: 1; grid-column: 4 / span 2" class="text-sm text-center">Story Points</div>\n                <div style="grid-row: 1; grid-column: 6 / span 2" class="text-sm text-center">Start Date</div>\n                <div style="grid-row: 1; grid-column: 8 / span 2" class="text-sm text-center">Due Date</div>\n                <div style="grid-row: 2; grid-column: 1" class="text-sm">\n                    <input type="checkbox"  \n                        on:change="this.selectAll(scope.element.checked)"\n                        checked:from="this.allWorkItemsSelected()"/>\n                </div>\n                <div style="grid-row: 2; grid-column: 2" class="text-sm">Key</div>\n                <div style="grid-row: 2; grid-column: 3" class="text-sm">Summary</div>\n                <div style="grid-row: 2; grid-column: 4" class="text-sm pl-2">Current</div>\n                <div style="grid-row: 2; grid-column: 5" class="text-sm pr-2">New</div>\n                <div style="grid-row: 2; grid-column: 6" class="text-sm pl-2">Current</div>\n                <div style="grid-row: 2; grid-column: 7" class="text-sm pr-2">New</div>\n                <div style="grid-row: 2; grid-column: 8" class="text-sm pl-2">Current</div>\n                <div style="grid-row: 2; grid-column: 9" class="text-sm">New</div>\n                <div \n                    class="border-solid border-b border-neutral-40"\n                    style="grid-row: 2 / span 1; grid-column: 1 / span 9; z-index: -1"></div>\n                {{# for(workItem of this.workItemsWithDates) }}\n                    <div>\n                        <input type="checkbox" \n                            on:change="this.selectWorkItem(workItem, scope.element.checked)"\n                            checked:from="this.isWorkItemSelected(workItem)"/>\n                    </div>\n                    <div>{{workItem.work.issue["Issue key"]}}</div>\n                    <div>{{workItem.work.issue.Summary}}</div>\n                    <div class="pl-2 text-right">{{ this.oldStoryPoints(workItem) }}</div>\n                    <div class="pr-2 {{this.storyPointsEqualClassName(workItem)}} text-right">{{ this.newStoryPoints(workItem) }}</div>\n                    <div class="pl-2">{{workItem.work.issue[this.startDateField]}}</div>\n                    <div class="pr-2 {{this.startDateEqualClassName(workItem)}}">{{ jiraDates( workItem.dates.startDate ) }}</div>\n                    <div class="pl-2">{{workItem.work.issue[this.dueDateField]}}</div>\n                    <div class=" {{this.dueDateEqualClassName(workItem)}}">{{ jiraDates( workItem.dates.dueDate ) }}</div>\n                {{/ for }}\n            </div>\n            <div class="flex gap-2 flex-row-reverse">\n                {{# if(this.issueUpdates.isPending) }}\n                    <button class="btn-primary" disabled>\n                    <svg class="animate-spin -ml-0.5 -mt-0.5 mr-1 h-e w-4 text-white inline-block" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">\n                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>\n                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>\n                    </svg> \n                    Saving changes in Jira\n                    \n                    </button>\n                {{/ if }}\n                {{# or(this.issueUpdates.isResolved, not(this.issueUpdates)) }}\n                    <button class="btn-primary" on:click="this.save(scope.event)" disabled:from="not(this.selectedWorkItemsToBeSaved.length)">\n                        Save selected changes in Jira\n                    </button>\n                {{/ or }}\n                \n                <button class="btn-secondary" value="cancel" formmethod="dialog">Cancel</button>\n            </div>\n            {{# eq(this.issueUpdateOutcome.status, "rejected") }}\n            <div class="bg-yellow-500 p-4 mt-2">\n                <p class="text-lg">There was an error saving to Jira!</p>\n                <p>Error: {{this.issueUpdateOutcome.errorReasons[0]}}</p>\n            </div>\n            {{/ eq }}\n        </form>\n    ';static props={workItems:t.Any,selectedWorkItems:{value({listenTo:e,resolve:t,lastSet:s}){e(s,(e=>{t(e)})),e("workItems",(()=>{t(new Set)})),t(new Set)}},storyPointField:String,startDateField:String,dueDateField:String,startDate:Date,issueUpdates:t.Any,jiraHelpers:t.Any,issueUpdateOutcome:{value({listenTo:e,resolve:t}){const s=e=>{e?(t({errorReasons:[],status:"pending"}),e.then((e=>{const s=e.map(((e,t)=>({...e,workItem:this.selectedWorkItemsToBeSaved[t]}))).filter((e=>"rejected"===e.status));return s.length?(console.log(this.selectedWorkItemsToBeSaved),t({errorReasons:(i=s.map((({reason:e,workItem:t})=>({reason:e,workItem:t}))),a=this.jiraFields,i.map((e=>function({reason:e,workItem:t},s){if(Array.isArray(e.errorMessages)&&e.errorMessages.length)return e.errorMessages[0];if(e.errors){console.log(e.errors);const i=Object.values(e.errors)[0];if(i.includes("It is not on the appropriate screen, or unknown")){const i=Object.keys(e.errors).map((e=>s.idMap[e]||e));return r.safeString(`The fields (${i.join(", ")}) are not on the screen associated with the\n                <a target='_blank' href='${t.work.issue.url}'>${t.work.issue.Summary}</a> epic. <a target='_blank' href='https://github.com/bitovi/jira-auto-scheduler/wiki/Troubleshooting#a-field-is-not-on-the-appropriate-screen'>Read how to fix it here.</a>`)}return i}return e.message}(e,a)))),status:"rejected"})):t({errorReasons:[],status:"fulfilled"});var i,a}))):t({errorReasons:[],status:"waiting"})};e("issueUpdates",(({value:e})=>{s(e)})),s(this.updatePromises)}}};connected(){this.parentElement.showModal(),this.listenTo("issueUpdateOutcome",(({value:e})=>{"fulfilled"===e.status&&(this.issueUpdates=null,this.dispatch("saved"))})),this.jiraHelpers.fieldsRequest.then((e=>{this.jiraFields=e}))}selectAll(e){this.selectedWorkItems=e?new Set(this.workItemsWithDates.map((e=>e.work.issue["Issue key"]))):new Set}allWorkItemsSelected(){return this.workItemsWithDates.map((e=>e.work.issue["Issue key"])).every((e=>this.selectedWorkItems.has(e)))}isWorkItemSelected(e){return this.selectedWorkItems.has(e.work.issue["Issue key"])}selectWorkItem(e,t){const s=e.work.issue["Issue key"],r=new Set(this.selectedWorkItems);t?r.add(s):r.delete(s),this.selectedWorkItems=r}get workItemsWithDates(){return Object.values(this.workItems).map((e=>{const t=e.serialize();return t.dates=s(t,this.startDate),t}))}get selectedWorkItemsToBeSaved(){return this.workItemsWithDates.filter((e=>this.selectedWorkItems.has(e.work.issue["Issue key"])))}jiraDates(e){return i.format(e)}round(e){return Math.round(e)}oldStoryPoints(e){return e.work.issue[this.storyPointField]}newStoryPoints(e){return Math.round(e.dates.totalPoints)}storyPointsEqualClassName(e){return this.oldStoryPoints(e)!==this.newStoryPoints(e)?"bg-yellow-300":""}startDateEqualClassName(e){return e.work.issue[this.startDateField]!==this.jiraDates(e.dates.startDate)?"bg-yellow-300":""}dueDateEqualClassName(e){return e.work.issue[this.dueDateField]!==this.jiraDates(e.dates.dueDate)?"bg-yellow-300":""}save(e){e.preventDefault();const t=this.selectedWorkItemsToBeSaved.map((e=>({...e,updates:{[this.startDateField]:this.jiraDates(e.dates.startDateWithTimeEnoughToFinish),[this.dueDateField]:this.jiraDates(e.dates.dueDate),[this.storyPointField]:this.newStoryPoints(e)}}))).map((e=>({...e,updatePromise:this.jiraHelpers.editJiraIssueWithNamedFields(e.work.issue["Issue key"],e.updates)})));this.issueUpdates=Promise.allSettled(t.map((e=>e.updatePromise)))}}customElements.define("update-epics",a);export{a as default};
//# sourceMappingURL=update-epics-Y-2lY9M4.js.map
