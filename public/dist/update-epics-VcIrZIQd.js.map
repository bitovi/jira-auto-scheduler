{"version":3,"file":"update-epics-VcIrZIQd.js","sources":["../update-epics.js"],"sourcesContent":["import { StacheElement, type, ObservableObject, fromAttribute, stache } from \"./can.js\";\nimport {getDatesFromWork} from \"./simulation-data.js\";\n\nconst jiraDataFormatter = new Intl.DateTimeFormat('en-CA', { // 'en-CA' uses the YYYY-MM-DD format\n    year: 'numeric',\n    month: '2-digit', // '2-digit' will ensure month is always represented with two digits\n    day: '2-digit', // '2-digit' will ensure day is always represented with two digits\n    calendar: 'iso8601', // This specifies usage of the ISO 8601 calendar\n    timeZone: \"UTC\"\n  });\n\nclass UpdateEpics extends StacheElement {\n    static view = `\n        <form class=\"p-4 rounded\">\n            <h3 class=\"text-lg font-semibold\">Review changes</h3>\n            <div \n                class=\"grid gap-x-3 py-4\"\n                style=\"grid-template-columns: repeat(8, auto); \">\n                <div style=\"grid-row: 1; grid-column: 1 / span 2\" class=\"text-sm\"></div>\n                <div style=\"grid-row: 1; grid-column: 3 / span 2\" class=\"text-sm text-center\">Story Points</div>\n                <div style=\"grid-row: 1; grid-column: 5 / span 2\" class=\"text-sm text-center\">Start Date</div>\n                <div style=\"grid-row: 1; grid-column: 7 / span 2\" class=\"text-sm text-center\">Due Date</div>\n                <div style=\"grid-row: 2; grid-column: 1\" class=\"text-sm\">Key</div>\n                <div style=\"grid-row: 2; grid-column: 2\" class=\"text-sm\">Summary</div>\n                <div style=\"grid-row: 2; grid-column: 3\" class=\"text-sm pl-2\">Current</div>\n                <div style=\"grid-row: 2; grid-column: 4\" class=\"text-sm pr-2\">New</div>\n                <div style=\"grid-row: 2; grid-column: 5\" class=\"text-sm pl-2\">Current</div>\n                <div style=\"grid-row: 2; grid-column: 6\" class=\"text-sm pr-2\">New</div>\n                <div style=\"grid-row: 2; grid-column: 7\" class=\"text-sm pl-2\">Current</div>\n                <div style=\"grid-row: 2; grid-column: 8\" class=\"text-sm\">New</div>\n                <div \n                    class=\"border-solid border-b border-neutral-40\"\n                    style=\"grid-row: 2 / span 1; grid-column: 1 / span 8\"></div>\n                {{# for(workItem of this.workItemsWithDates) }}\n                    <div>{{workItem.work.issue[\"Issue key\"]}}</div>\n                    <div>{{workItem.work.issue.Summary}}</div>\n                    <div class=\"pl-2 text-right\">{{ this.oldStoryPoints(workItem) }}</div>\n                    <div class=\"pr-2 {{this.storyPointsEqualClassName(workItem)}} text-right\">{{ this.newStoryPoints(workItem) }}</div>\n                    <div class=\"pl-2\">{{workItem.work.issue[this.startDateField]}}</div>\n                    <div class=\"pr-2 {{this.startDateEqualClassName(workItem)}}\">{{ jiraDates( workItem.dates.startDate ) }}</div>\n                    <div class=\"pl-2\">{{workItem.work.issue[this.dueDateField]}}</div>\n                    <div class=\" {{this.dueDateEqualClassName(workItem)}}\">{{ jiraDates( workItem.dates.dueDate ) }}</div>\n                {{/ for }}\n            </div>\n            <div class=\"flex gap-2 flex-row-reverse\">\n                {{# if(this.issueUpdates.isPending) }}\n                    <button class=\"btn-primary\" disabled>\n                    <svg class=\"animate-spin -ml-0.5 -mt-0.5 mr-1 h-e w-4 text-white inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg> \n                    Saving changes in Jira\n                    \n                    </button>\n                {{/ if }}\n                {{# or(this.issueUpdates.isResolved, not(this.issueUpdates)) }}\n                    <button class=\"btn-primary\" on:click=\"this.save(scope.event)\">\n                        Save selected changes in Jira\n                    </button>\n                {{/ or }}\n                \n                <button class=\"btn-secondary\" value=\"cancel\" formmethod=\"dialog\">Cancel</button>\n            </div>\n            {{# eq(this.issueUpdateOutcome.status, \"rejected\") }}\n            <div class=\"bg-yellow-500 p-4 mt-2\">\n                <p class=\"text-lg\">There was an error saving to Jira!</p>\n                <p>Error: {{this.issueUpdateOutcome.errorReasons[0]}}</p>\n            </div>\n            {{/ eq }}\n        </form>\n    `;\n    static props = {\n        workItems: type.Any,\n        storyPointField: String,\n        startDateField: String,\n        dueDateField: String,\n        startDate: Date,\n        issueUpdates: type.Any,\n        jiraHelpers: type.Any,\n\n        // {status: waiting|pending|rejected|fulfilled, errorReasons: []}\n        issueUpdateOutcome: {\n            value({listenTo, resolve}){\n                function updateFromPromise(updatePromises){\n                    if(!updatePromises) {\n                        resolve({errorReasons: [], status: \"waiting\"})\n                    } else {\n                        resolve({errorReasons: [], status: \"pending\"})\n                        updatePromises.then((outcomes)=>{\n                            const errors = outcomes.filter( outcome => outcome.status === \"rejected\");\n                            if(errors.length) {\n                                return resolve({errorReasons: getNiceReasonsMessages( errors.map(error => error.reason) ), status: \"rejected\"})\n                            } else {\n                                return resolve({errorReasons: [], status: \"fulfilled\"})\n                            }\n                        });\n                    }\n                }\n                listenTo(\"issueUpdates\",({value})=>{\n                    updateFromPromise(value)\n                });\n                updateFromPromise(this.updatePromises);\n            }\n        }\n    };\n    connected(){\n        // this isn't great, but easy\n        this.parentElement.showModal();\n        this.listenTo(\"issueUpdateOutcome\",({value})=>{\n            if(value.status === \"fulfilled\") {\n                this.issueUpdates = null;\n                this.dispatch(\"saved\");\n            }\n        })\n    }\n    get workItemsWithDates(){\n        return Object.values(this.workItems).map( (workItem)=> {\n            const clone = workItem.serialize();\n            clone.dates = getDatesFromWork(clone, this.startDate);\n            return clone;\n        }) \n    }\n    \n    jiraDates(date){\n        return jiraDataFormatter.format(date)\n    }\n    round(number) {\n        return Math.round(number)\n    }\n    oldStoryPoints(workItem) {\n        return workItem.work.issue[this.storyPointField];\n    }\n    newStoryPoints(workItem) {\n        return Math.round( workItem.dates.totalPoints );\n    }\n    storyPointsEqualClassName(workItem) {\n        return this.oldStoryPoints(workItem) !== this.newStoryPoints(workItem) ? \"bg-yellow-300\" : \"\";\n    }\n    startDateEqualClassName(workItem) {\n        return workItem.work.issue[this.startDateField] !== this.jiraDates( workItem.dates.startDate ) ? \"bg-yellow-300\" : \"\";\n    }\n    dueDateEqualClassName(workItem) {\n        return workItem.work.issue[this.dueDateField] !== this.jiraDates( workItem.dates.dueDate ) ? \"bg-yellow-300\" : \"\";\n    }\n\n    save(event){\n        event.preventDefault();\n        const allWork = this.workItemsWithDates.map( workItem => {\n          return {\n            ...workItem,\n            updates: {\n              [this.startDateField]: this.jiraDates( workItem.dates.startDateWithTimeEnoughToFinish ),\n              [this.dueDateField]: this.jiraDates( workItem.dates.dueDate ),\n              [this.storyPointField]: this.newStoryPoints(workItem)\n            }\n          };\n        });\n  \n      const changedWork = allWork/*.filter((work) => {\n        return work.issue[\"Start date\"] !== work.updates[\"Start date\"]  \n          || work.issue[\"Due date\"] !== work.updates[\"Due date\"] \n          || work.issue[\"Story points\"] !== work.updates[\"Story points\"];\n      });*/\n      const updates = changedWork.map( workItem => {\n        return {\n            ...workItem,\n            updatePromise: this.jiraHelpers.editJiraIssueWithNamedFields(workItem.work.issue[\"Issue key\"], workItem.updates)\n        }\n      })\n      this.issueUpdates = Promise.allSettled(updates.map( update => update.updatePromise));\n      /*\n      this.issueUpdates\n        .then((values)=> {\n            debugger;\n            console.log(\"SAVED\", values);\n\n            if()\n            this.dispatch(\"saved\");\n        })\n        .catch(e => {\n            debugger;\n            console.log(e)\n        })*/\n    }\n}\n\nfunction getNiceReasonsMessages(reasons){\n    return reasons.map(getNiceReasonsMessage);\n}\n\nfunction getNiceReasonsMessage(reason){\n    if(Array.isArray( reason.errorMessages) && reason.errorMessages.length) {\n        return reason.errorMessages[0]\n    } else if(reason.errors ) {\n        const message = Object.values(reason.errors)[0];\n        if(message.includes(\"It is not on the appropriate screen, or unknown\")) {\n            return stache.safeString(\"A field is not on the screen associated with the epic.\"+\n                \" <a target='_blank' href='https://github.com/bitovi/jira-auto-scheduler/wiki/Troubleshooting#a-field-is-not-on-the-appropriate-screen'>Read how to fix it here.</a>\")\n        } else {\n            return message;\n        }\n         \n    } else {\n        return reason.message;\n    }\n}\n\n\nexport default UpdateEpics;\n\ncustomElements.define(\"update-epics\", UpdateEpics);"],"names":["jiraDataFormatter","Intl","DateTimeFormat","year","month","day","calendar","timeZone","UpdateEpics","StacheElement","static","workItems","type","Any","storyPointField","String","startDateField","dueDateField","startDate","Date","issueUpdates","jiraHelpers","issueUpdateOutcome","value","listenTo","resolve","updateFromPromise","updatePromises","errorReasons","status","then","outcomes","errors","filter","outcome","length","reasons","map","error","reason","getNiceReasonsMessage","this","connected","parentElement","showModal","dispatch","workItemsWithDates","Object","values","workItem","clone","serialize","dates","getDatesFromWork","jiraDates","date","format","round","number","Math","oldStoryPoints","work","issue","newStoryPoints","totalPoints","storyPointsEqualClassName","startDateEqualClassName","dueDateEqualClassName","dueDate","save","event","preventDefault","updates","startDateWithTimeEnoughToFinish","updatePromise","editJiraIssueWithNamedFields","Promise","allSettled","update","Array","isArray","errorMessages","message","includes","stache","safeString","customElements","define"],"mappings":"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"}