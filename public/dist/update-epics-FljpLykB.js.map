{"version":3,"file":"update-epics-FljpLykB.js","sources":["../update-epics.js"],"sourcesContent":["import { StacheElement, type, ObservableObject, fromAttribute, stache } from \"./can.js\";\nimport {getDatesFromWork} from \"./simulation-data.js\";\n\nconst jiraDataFormatter = new Intl.DateTimeFormat('en-CA', { // 'en-CA' uses the YYYY-MM-DD format\n    year: 'numeric',\n    month: '2-digit', // '2-digit' will ensure month is always represented with two digits\n    day: '2-digit', // '2-digit' will ensure day is always represented with two digits\n    calendar: 'iso8601', // This specifies usage of the ISO 8601 calendar\n    timeZone: \"UTC\"\n  });\n\nclass UpdateEpics extends StacheElement {\n    static view = `\n        <form class=\"p-4 rounded\">\n            <h3 class=\"text-lg font-semibold\">Review changes</h3>\n            <div \n                class=\"grid gap-x-3 py-4\"\n                style=\"grid-template-columns: repeat(9, auto); \">\n                <div style=\"grid-row: 1; grid-column: 1 / span 3\" class=\"text-sm\"></div>\n                <div style=\"grid-row: 1; grid-column: 4 / span 2\" class=\"text-sm text-center\">Story Points</div>\n                <div style=\"grid-row: 1; grid-column: 6 / span 2\" class=\"text-sm text-center\">Start Date</div>\n                <div style=\"grid-row: 1; grid-column: 8 / span 2\" class=\"text-sm text-center\">Due Date</div>\n                <div style=\"grid-row: 2; grid-column: 1\" class=\"text-sm\">\n                    <input type=\"checkbox\"  \n                        on:change=\"this.selectAll(scope.element.checked)\"\n                        checked:from=\"this.allWorkItemsSelected()\"/>\n                </div>\n                <div style=\"grid-row: 2; grid-column: 2\" class=\"text-sm\">Key</div>\n                <div style=\"grid-row: 2; grid-column: 3\" class=\"text-sm\">Summary</div>\n                <div style=\"grid-row: 2; grid-column: 4\" class=\"text-sm pl-2\">Current</div>\n                <div style=\"grid-row: 2; grid-column: 5\" class=\"text-sm pr-2\">New</div>\n                <div style=\"grid-row: 2; grid-column: 6\" class=\"text-sm pl-2\">Current</div>\n                <div style=\"grid-row: 2; grid-column: 7\" class=\"text-sm pr-2\">New</div>\n                <div style=\"grid-row: 2; grid-column: 8\" class=\"text-sm pl-2\">Current</div>\n                <div style=\"grid-row: 2; grid-column: 9\" class=\"text-sm\">New</div>\n                <div \n                    class=\"border-solid border-b border-neutral-40\"\n                    style=\"grid-row: 2 / span 1; grid-column: 1 / span 9; z-index: -1\"></div>\n                {{# for(workItem of this.workItemsWithDates) }}\n                    <div>\n                        <input type=\"checkbox\" \n                            on:change=\"this.selectWorkItem(workItem, scope.element.checked)\"\n                            checked:from=\"this.isWorkItemSelected(workItem)\"/>\n                    </div>\n                    <div>{{workItem.work.issue[\"Issue key\"]}}</div>\n                    <div>{{workItem.work.issue.Summary}}</div>\n                    <div class=\"pl-2 text-right\">{{ this.oldStoryPoints(workItem) }}</div>\n                    <div class=\"pr-2 {{this.storyPointsEqualClassName(workItem)}} text-right\">{{ this.newStoryPoints(workItem) }}</div>\n                    <div class=\"pl-2\">{{workItem.work.issue[this.startDateField]}}</div>\n                    <div class=\"pr-2 {{this.startDateEqualClassName(workItem)}}\">{{ jiraDates( workItem.dates.startDate ) }}</div>\n                    <div class=\"pl-2\">{{workItem.work.issue[this.dueDateField]}}</div>\n                    <div class=\" {{this.dueDateEqualClassName(workItem)}}\">{{ jiraDates( workItem.dates.dueDate ) }}</div>\n                {{/ for }}\n            </div>\n            <div class=\"flex gap-2 flex-row-reverse\">\n                {{# if(this.issueUpdates.isPending) }}\n                    <button class=\"btn-primary\" disabled>\n                    <svg class=\"animate-spin -ml-0.5 -mt-0.5 mr-1 h-e w-4 text-white inline-block\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                        <circle class=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" stroke-width=\"4\"></circle>\n                        <path class=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                    </svg> \n                    Saving changes in Jira\n                    \n                    </button>\n                {{/ if }}\n                {{# or(this.issueUpdates.isResolved, not(this.issueUpdates)) }}\n                    <button class=\"btn-primary\" on:click=\"this.save(scope.event)\" disabled:from=\"not(this.selectedWorkItemsToBeSaved.length)\">\n                        Save selected changes in Jira\n                    </button>\n                {{/ or }}\n                \n                <button class=\"btn-secondary\" value=\"cancel\" formmethod=\"dialog\">Cancel</button>\n            </div>\n            {{# eq(this.issueUpdateOutcome.status, \"rejected\") }}\n            <div class=\"bg-yellow-500 p-4 mt-2\">\n                <p class=\"text-lg\">There was an error saving to Jira!</p>\n                <p>Error: {{this.issueUpdateOutcome.errorReasons[0]}}</p>\n            </div>\n            {{/ eq }}\n        </form>\n    `;\n    static props = {\n        workItems: type.Any,\n        selectedWorkItems: {\n            value({listenTo, resolve, lastSet}){\n                console.log(\"YES\")\n                listenTo(lastSet, (value)=>{\n                    resolve(value);\n                })\n                listenTo(\"workItems\",()=>{\n                    resolve(new Set())\n                });\n                resolve(new Set());\n            }\n        },\n        storyPointField: String,\n        startDateField: String,\n        dueDateField: String,\n        startDate: Date,\n        issueUpdates: type.Any,\n        jiraHelpers: type.Any,\n\n        // {status: waiting|pending|rejected|fulfilled, errorReasons: []}\n        issueUpdateOutcome: {\n            value({listenTo, resolve}){\n                function updateFromPromise(updatePromises){\n                    if(!updatePromises) {\n                        resolve({errorReasons: [], status: \"waiting\"})\n                    } else {\n                        resolve({errorReasons: [], status: \"pending\"})\n                        updatePromises.then((outcomes)=>{\n                            const errors = outcomes.filter( outcome => outcome.status === \"rejected\");\n                            if(errors.length) {\n                                return resolve({errorReasons: getNiceReasonsMessages( errors.map(error => error.reason) ), status: \"rejected\"})\n                            } else {\n                                return resolve({errorReasons: [], status: \"fulfilled\"})\n                            }\n                        });\n                    }\n                }\n                listenTo(\"issueUpdates\",({value})=>{\n                    updateFromPromise(value)\n                });\n                updateFromPromise(this.updatePromises);\n            }\n        }\n    };\n    connected(){\n        // this isn't great, but easy\n        this.parentElement.showModal();\n        this.listenTo(\"issueUpdateOutcome\",({value})=>{\n            if(value.status === \"fulfilled\") {\n                this.issueUpdates = null;\n                this.dispatch(\"saved\");\n            }\n        })\n    }\n    selectAll(checked){\n        this.selectedWorkItems = checked ? new Set( this.workItemsWithDates.map((workItem)=> {\n            return workItem.work.issue[\"Issue key\"];\n        }) ) : new Set()\n    }\n    allWorkItemsSelected(){\n        const selected = this.workItemsWithDates.map( (workItem)=> {\n            return workItem.work.issue[\"Issue key\"];\n        })\n        console.log(selected, this.selectedWorkItems);\n        return selected.every( (key)=> {\n            return this.selectedWorkItems.has( key )\n        })\n    }\n    isWorkItemSelected(workItem){\n        return this.selectedWorkItems.has( workItem.work.issue[\"Issue key\"] )\n    }\n    selectWorkItem(workItem, checked){\n        const key = workItem.work.issue[\"Issue key\"];\n        const newItems = new Set(this.selectedWorkItems);\n        if(checked) {\n            newItems.add(key)\n        } else {\n            newItems.delete(key)\n        }\n        this.selectedWorkItems = newItems;\n    }\n    get workItemsWithDates(){\n        return Object.values(this.workItems).map( (workItem)=> {\n            const clone = workItem.serialize();\n            clone.dates = getDatesFromWork(clone, this.startDate);\n            return clone;\n        }) \n    }\n    get selectedWorkItemsToBeSaved(){\n        return this.workItemsWithDates.filter( (workItem)=> {\n            return this.selectedWorkItems.has( workItem.work.issue[\"Issue key\"] )\n        });\n    }\n    jiraDates(date){\n        return jiraDataFormatter.format(date)\n    }\n    round(number) {\n        return Math.round(number)\n    }\n    oldStoryPoints(workItem) {\n        return workItem.work.issue[this.storyPointField];\n    }\n    newStoryPoints(workItem) {\n        return Math.round( workItem.dates.totalPoints );\n    }\n    storyPointsEqualClassName(workItem) {\n        return this.oldStoryPoints(workItem) !== this.newStoryPoints(workItem) ? \"bg-yellow-300\" : \"\";\n    }\n    startDateEqualClassName(workItem) {\n        return workItem.work.issue[this.startDateField] !== this.jiraDates( workItem.dates.startDate ) ? \"bg-yellow-300\" : \"\";\n    }\n    dueDateEqualClassName(workItem) {\n        return workItem.work.issue[this.dueDateField] !== this.jiraDates( workItem.dates.dueDate ) ? \"bg-yellow-300\" : \"\";\n    }\n    save(event){\n        event.preventDefault();\n        const allWork = this.selectedWorkItemsToBeSaved.map( workItem => {\n          return {\n            ...workItem,\n            updates: {\n              [this.startDateField]: this.jiraDates( workItem.dates.startDateWithTimeEnoughToFinish ),\n              [this.dueDateField]: this.jiraDates( workItem.dates.dueDate ),\n              [this.storyPointField]: this.newStoryPoints(workItem)\n            }\n          };\n        });\n  \n      const changedWork = allWork/*.filter((work) => {\n        return work.issue[\"Start date\"] !== work.updates[\"Start date\"]  \n          || work.issue[\"Due date\"] !== work.updates[\"Due date\"] \n          || work.issue[\"Story points\"] !== work.updates[\"Story points\"];\n      });*/\n      const updates = changedWork.map( workItem => {\n        return {\n            ...workItem,\n            updatePromise: this.jiraHelpers.editJiraIssueWithNamedFields(workItem.work.issue[\"Issue key\"], workItem.updates)\n        }\n      })\n      this.issueUpdates = Promise.allSettled(updates.map( update => update.updatePromise));\n      /*\n      this.issueUpdates\n        .then((values)=> {\n            debugger;\n            console.log(\"SAVED\", values);\n\n            if()\n            this.dispatch(\"saved\");\n        })\n        .catch(e => {\n            debugger;\n            console.log(e)\n        })*/\n    }\n}\n\nfunction getNiceReasonsMessages(reasons){\n    return reasons.map(getNiceReasonsMessage);\n}\n\nfunction getNiceReasonsMessage(reason){\n    if(Array.isArray( reason.errorMessages) && reason.errorMessages.length) {\n        return reason.errorMessages[0]\n    } else if(reason.errors ) {\n        const message = Object.values(reason.errors)[0];\n        if(message.includes(\"It is not on the appropriate screen, or unknown\")) {\n            return stache.safeString(\"A field is not on the screen associated with the epic.\"+\n                \" <a target='_blank' href='https://github.com/bitovi/jira-auto-scheduler/wiki/Troubleshooting#a-field-is-not-on-the-appropriate-screen'>Read how to fix it here.</a>\")\n        } else {\n            return message;\n        }\n         \n    } else {\n        return reason.message;\n    }\n}\n\n\nexport default UpdateEpics;\n\ncustomElements.define(\"update-epics\", UpdateEpics);"],"names":["jiraDataFormatter","Intl","DateTimeFormat","year","month","day","calendar","timeZone","UpdateEpics","StacheElement","static","workItems","type","Any","selectedWorkItems","value","listenTo","resolve","lastSet","console","log","Set","storyPointField","String","startDateField","dueDateField","startDate","Date","issueUpdates","jiraHelpers","issueUpdateOutcome","updateFromPromise","updatePromises","errorReasons","status","then","outcomes","errors","filter","outcome","length","reasons","map","error","reason","getNiceReasonsMessage","this","connected","parentElement","showModal","dispatch","selectAll","checked","workItemsWithDates","workItem","work","issue","allWorkItemsSelected","selected","every","key","has","isWorkItemSelected","selectWorkItem","newItems","add","delete","Object","values","clone","serialize","dates","getDatesFromWork","selectedWorkItemsToBeSaved","jiraDates","date","format","round","number","Math","oldStoryPoints","newStoryPoints","totalPoints","storyPointsEqualClassName","startDateEqualClassName","dueDateEqualClassName","dueDate","save","event","preventDefault","updates","startDateWithTimeEnoughToFinish","updatePromise","editJiraIssueWithNamedFields","Promise","allSettled","update","Array","isArray","errorMessages","message","includes","stache","safeString","customElements","define"],"mappings":"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"}